Task Instructions
Core Features You Must Deliver
1. Landing Page
Clearly present the app‚Äôs name, a catchy description, and Call-to-Action buttons ("Login" and "Get Started").The hero section must include a wavy background, implemented via SVG or CSS clip-path.Include decorative circles (at least one in the hero) and box-shaped sections (for features or content) with shadows and rounded corners.The entire website must have a max-width of 1440px, centered horizontally on larger screens.The layout must remain fully responsive across devices, with mobile and tablet adaptations.Include a consistent footer section across all pages.
2. Authentication Screen
Build Login and Signup pages with form validation.Provide inline error messages and toast/snackbar notifications for failed logins or invalid credentials.On successful authentication, redirect users to the Dashboard.Authentication should be simulated using localStorage, a mock API, or a JSON server token system.
3. Dashboard
Display summary statistics, e.g.:Total ticketsOpen ticketsResolved ticketsInclude navigation links to the Ticket Management screen.Add a visible Logout button that clears the session and redirects to the Login screen.Must follow the same visual structure and container width rule (max-width: 1440px, centered layout).
4. Ticket Management Screen (CRUD)
Implement a fully functional Ticket Management page with:Create: Form to create new tickets.Read: Display a list of existing tickets using card-style boxes with status tags.Update: Edit existing ticket details with form validation.Delete: Allow users to remove tickets with a confirmation step.All actions must:          - Include real-time validation.
          - Display clear success or error feedback via inline messages or toast notifications.

‚úÖ The Rules of Engagement
üìã Data Validation Mandates
title and status fields are mandatory.status field must strictly accept only these values: "open", "in_progress", "closed".Validation errors must be displayed in a user-friendly manner ‚Äî either inline (beneath fields) or as toasts/snackbars.Optional fields (like description or priority) must still be validated for length or type where applicable.
‚ùå Flawless Error Handling
Create a consistent error-handling system for:Invalid form inputs (e.g., empty title).Unauthorized access (must redirect users to Login).Failed network/API calls (show toast or inline message).Use clear and descriptive error messages like:           - ‚ÄúYour session has expired ‚Äî please log in again.‚Äù
           - ‚ÄúFailed to load tickets. Please retry.‚Äù
üîê Security & Authorization
Protect the Dashboard and Ticket Management pages ‚Äî only accessible with a valid session token.Authentication simulation must use localStorage with a key name: ticketapp_session.Unauthorized users attempting to access restricted routes must be redirected to /auth/login.Logout should clear the session and return the user to the landing page.
üé® Layout and Design Consistency Requirements
These design rules must be identical across React, Vue.js, and Twig versions.Max Width: Content must be centered with a max-width: 1440px on large screens.Hero Section: Includes a wavy SVG background at the bottom edge.At least one decorative circle (CSS or SVG) must overlap the hero section.
Other Sections:
Use card-like boxes for stats, tickets, or features.Include at least two circular decorative elements across the site.Responsive Behavior:Mobile: stacked layout with collapsible navigation.Tablet/Desktop: multi-column grid and consistent spacing.
Color & Status Rules:
open ‚Üí Green tonein_progress ‚Üí Amber toneclosed ‚Üí Gray tone
Accessibility:
Use semantic HTML, alt text, visible focus states, and sufficient color contrast.
üìò Required Documentation
Each framework implementation must include a README.md containing:A list of frameworks and libraries used.
Setup and execution steps for each version.
Instructions for switching between React, Vue, and Twig versions.Short explanation of UI components and state structure.Notes...